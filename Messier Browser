import sys
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtCore import QUrl, Qt
from googleapiclient.discovery import build
from PyQt5.QtGui import QIcon
import webbrowser
from PyQt5.QtWidgets import (QApplication, QWidget, QTextEdit,
                                    QPushButton, QVBoxLayout, QHBoxLayout,
                                    QLabel)
import google.generativeai as genai
import os



api_key = "YOUR_API_KEY"
search_engine_id = "YOUR_CSE_ID"

class SearchEngine(QWidget):
    def __init__(self):
        super().__init__()
        self.service = build("customsearch", "v1", developerKey=api_key)
        self.setWindowTitle("Messier Go")
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Arama yap...")
        self.search_box.returnPressed.connect(self.search)
        self.search_button = QPushButton("Ara")
        self.search_button.clicked.connect(self.search)
        self.results_list = QListWidget()
        self.results_list.setStyleSheet("QListWidget::item { height: 40px; }")
        self.results_list.itemClicked.connect(self.open_link)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.results_list)
        layout = QVBoxLayout()
        layout.addWidget(self.search_box)
        layout.addWidget(self.search_button)
        layout.addWidget(scroll_area)
        self.setLayout(layout)

    def search(self):
        query = self.search_box.text()
        if not query:
            return
        self.results_list.clear()
        try:
            response = self.service.cse().list(q=query, cx=search_engine_id).execute()
            for item in response['items']:
                list_item = QListWidgetItem(item['title'])
                list_item.setData(Qt.ToolTipRole, item['snippet'])
                list_item.setData(Qt.UserRole, item['link'])
                self.results_list.addItem(list_item)
        except Exception as e:
            print(f"Hata: {e}")
            self.results_list.addItem(QListWidgetItem("Arama sırasında bir hata oluştu."))

    def open_link(self, item):
        link = item.data(Qt.UserRole)
        QApplication.clipboard().setText(link)
        print(f"Link kopyalandı: {link}")

    def closeEvent(self, event):
        self.deleteLater()
        event.accept()


search_engine_window = None

def messier_go():
    global search_engine_window
    if search_engine_window is None or not search_engine_window.isVisible():
        search_engine_window = SearchEngine()
    search_engine_window.show()
    search_engine_window.raise_()

class TabWidget(QTabWidget):
    def __init__(self):
        super().__init__()
        self.setTabsClosable(True)
        self.tabCloseRequested.connect(self.closeTab)
        self.newTab()

    def newTab(self):
        browser = QWebEngineView()
        browser.setUrl(QUrl("https://duckduckgo.com/"))
        index = self.addTab(browser, "Yeni Sekme")
        self.setCurrentIndex(index)

    def closeTab(self, index):
        self.removeTab(index)

class MainWindow(QMainWindow):
    def messier_AI(self):
        
        API_KEY = "YOUR_API_KEY"
        genai.configure(api_key=API_KEY)

        # Model oluşturma
        generation_config = {
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }

        model = genai.GenerativeModel(
            model_name="tunedModels/messierai-q377f8mqnhnl",
            generation_config=generation_config,
        )

        chat_session = model.start_chat(history=[])


        class ChatWindow(QDialog):
            def __init__(self):
                super().__init__()

                self.setWindowTitle("Messier AI Chat")

                # Arayüz elemanları
                self.chat_history = QTextEdit()
                self.user_input = QTextEdit(
                    placeholderText="Nasıl yardımcı olabilirim?",
                    maximumHeight=50  # Kullanıcı girdisi için yüksekliği sınırlayın
                )
                self.send_button = QPushButton("Gönder")
                self.clear_button = QPushButton("Temizle") # Geçmişi temizleme butonu eklendi

                # Butonlara tıklama olayları
                self.send_button.clicked.connect(self.send_message)
                self.clear_button.clicked.connect(self.clear_history) # Temizleme fonksiyonuna bağlandı

                # Layout
                v_layout = QVBoxLayout()

                input_layout = QHBoxLayout() # Kullanıcı girdisi ve gönder butonu için yatay layout
                input_layout.addWidget(self.user_input)
                input_layout.addWidget(self.send_button)

                v_layout.addWidget(self.chat_history)
                v_layout.addLayout(input_layout) # Yatay layout'u ana layout'a ekle
                v_layout.addWidget(self.clear_button) # Temizleme butonunu ekle


                self.setLayout(v_layout)

            def send_message(self):
                user_message = self.user_input.toPlainText()
                self.chat_history.append("Siz: " + user_message)  # Kullanıcı mesajını göster
                self.user_input.clear()  # Girdi alanını temizle

                try:
                    response = chat_session.send_message(user_message)
                    self.chat_history.append("Messier AI: " + response.text)  # Yanıtı göster
                except Exception as e:
                    self.chat_history.append(f"Hata: {e}")
                    import traceback
                    traceback.print_exc()

            def clear_history(self):
                self.chat_history.clear() # Sohbet geçmişini temizle


        if __name__ == "__main__":
            window = ChatWindow()
            window.exec_()
            



    def __init__(self):
        super().__init__()
        self.setWindowTitle("Messier Browser") # Başlık eklendi
        self.tab_widget = TabWidget()
        self.setCentralWidget(self.tab_widget)
        self.showMaximized()
        navbar = QToolBar()
        self.addToolBar(navbar)
        backButton = QAction("←", self)
        backButton.triggered.connect(self.tab_widget.currentWidget().back)
        navbar.addAction(backButton)
        forwardButton = QAction("→", self)
        forwardButton.triggered.connect(self.tab_widget.currentWidget().forward)
        navbar.addAction(forwardButton)
        reloadButton = QAction("↻", self)
        reloadButton.triggered.connect(self.tab_widget.currentWidget().reload)
        navbar.addAction(reloadButton)
        newTabButton = QAction("+", self)
        newTabButton.triggered.connect(self.tab_widget.newTab)
        navbar.addAction(newTabButton)
        SearchButton = QAction("Messier Go", self)
        SearchButton.triggered.connect(messier_go)
        navbar.addAction(SearchButton)
        AIButton = QAction("Messier_AI", self)
        AIButton.triggered.connect(self.messier_AI)
        navbar.addAction(AIButton)
        self.url_bar = QLineEdit()
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        navbar.addWidget(self.url_bar)
        self.tab_widget.currentChanged.connect(self.update_url)


    def navigate_to_url(self):
        url = self.url_bar.text()
        self.tab_widget.currentWidget().setUrl(QUrl(url))

    def update_url(self, index):
        if index != -1:
            self.url_bar.setText(self.tab_widget.currentWidget().url().toString())


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
