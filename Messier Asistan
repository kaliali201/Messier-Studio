import speech_recognition as sr
import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
import webbrowser
from gtts import gTTS
from playsound3 import playsound
import random
import os
import threading
import time
from tkinter import ttk
from googleapiclient.discovery import build
from tkinter import messagebox
from functools import partial
from tkinter import messagebox, scrolledtext
import csv
import tkinter.filedialog as fd
import tkinter.messagebox as mb
import requests
from googletrans import Translator
import asyncio
import nest_asyncio
import google.generativeai as genai


sesdosyasi= r"Galaxy-Note-4-Melody.mp3"

r = sr.Recognizer()

def messier_go():
    API_KEY = "YOUR_API_KEY"
    CSE_ID = "YOUR_CSE_ID"

    def google_search(search_query):
        service = build("customsearch", "v1", developerKey=API_KEY)
        try:
            res = service.cse().list(q=search_query, cx=CSE_ID).execute()
            return res.get("items", [])
        except Exception as e:
            messagebox.showerror("Hata", f"Google Arama hatası: {e}")
            return []

    def display_results(results):
        for child in result_tree.get_children():
            result_tree.delete(child)

        if results:
            for result in results:
                title = result.get('title', 'Başlık Yok')
                link = result.get('link', 'URL Yok')
                snippet = result.get('snippet', '')

                result_tree.insert("", "end", text=title, values=(link, snippet))

        else:
            result_tree.insert("", "end", text="Sonuç bulunamadı.", values=("", ""))

    def open_link(event):
        item = result_tree.selection()[0]
        link = result_tree.item(item)['values'][0]
        webbrowser.open(link)


    def search_button_clicked():
        search_query = search_entry.get()
        if not search_query:
            messagebox.showwarning("Uyarı", "Lütfen bir arama sorgusu girin.")
            return
        results = google_search(search_query)
        display_results(results)

    root = tk.Tk()
    root.title("Messier Go")


    search_label = tk.Label(root, text="Arama Sorgusu:")
    search_label.pack(pady=5)

    search_entry = tk.Entry(root, width=40)
    search_entry.pack(pady=5)

    search_button = tk.Button(root, text="Ara", command=search_button_clicked)
    search_button.pack(pady=5)

    result_tree = ttk.Treeview(root, columns=("link", "snippet"), show="headings")
    result_tree.heading("link", text="Link")
    result_tree.heading("snippet", text="Özet")
    result_tree.column("link", width=200, stretch=tk.NO)
    result_tree.column("snippet", width=400, stretch=tk.YES)
    result_tree.pack(expand=True, fill=tk.BOTH)
    result_tree.bind("<Double-1>", open_link)
    root.mainloop()

def messierlexicon():
    """TDK kelime verilerini işleyen bir fonksiyon (Tkinter ile entegre)."""
    def tdk_kelime_islemleri(dosya_adi):

        try:
            with open(dosya_adi, 'r', encoding='utf-8') as dosya:
                oku = csv.DictReader(dosya)
                veriler = list(oku)

            def yazdir_tum_anlamlar():
                sonuc = "\n".join([f"'{satir['madde']}': '{satir['anlam']}'" for satir in veriler])
                sonuc_pencere = tk.Toplevel(root)
                sonuc_pencere.title("Tüm Anlamlar")
                sonuc_text = scrolledtext.ScrolledText(sonuc_pencere, wrap=tk.WORD)
                sonuc_text.insert(tk.END, sonuc)
                sonuc_text.pack(expand=True, fill="both", padx=10, pady=10)
                sonuc_text.config(state=tk.DISABLED)

            def bul_anlam():
                aranan_madde = giris_alanı.get()
                bulunan = next((satir for satir in veriler if satir['madde'] == aranan_madde), None)
                sonuc_alani.config(state=tk.NORMAL)
                sonuc_alani.delete("1.0", tk.END)
                if bulunan:
                    sonuc_alani.insert(tk.END, f"'{bulunan['madde']}': '{bulunan['anlam']}'")
                else:
                    sonuc_alani.insert(tk.END, f"'{aranan_madde}' maddesi bulunamadı.")
                sonuc_alani.config(state=tk.DISABLED)


            root = tk.Tk()
            root.title("MessierLexicon")
            root.geometry("600x400")

            root.grid_rowconfigure(0, weight=1)
            root.grid_columnconfigure(0, weight=1)


            tk.Label(root, text="Madde Girin:").grid(row=0, column=0, sticky="w", padx=5, pady=5)

            giris_alanı = tk.Entry(root)
            giris_alanı.grid(row=1, column=0, sticky="ew", padx=5, pady=5)

            tk.Button(root, text="Tüm Anlamları Yazdır", command=yazdir_tum_anlamlar).grid(row=2, column=0, sticky="ew", padx=5, pady=5)
            tk.Button(root, text="Anlam Bul", command=bul_anlam).grid(row=3, column=0, sticky="ew", padx=5, pady=5)


            sonuc_alani = scrolledtext.ScrolledText(root, wrap=tk.WORD)
            sonuc_alani.grid(row=4, column=0, sticky="nsew", padx=5, pady=5)
            sonuc_alani.config(state=tk.DISABLED)


            root.mainloop()

        except FileNotFoundError:
            messagebox.showerror("Hata", f"Hata: '{dosya_adi}' dosyası bulunamadı.")
        except KeyError as e:
            messagebox.showerror("Hata", f"Hata: '{e}' sütunu dosyada bulunamadı. Lütfen verilerinizin yapısını kontrol edin.")
        except Exception as e:
            messagebox.showerror("Hata", f"Beklenmedik bir hata oluştu: {e}")


    dosya_adi = r"tdk_word_meaning_data.csv"
    tdk_kelime_islemleri(dosya_adi)

def notlar():
    tab = tk.Tk()
    tab.title("Notlar")

    not_bölümü = tk.Text(tab, wrap=tk.WORD)
    not_bölümü.pack(expand=True, fill="both")
    tab.minsize(width=175, height=150)
    tab.maxsize(width=250, height=200)
    tab.mainloop()

def çeviri():
    nest_asyncio.apply()

    def cevir():
        asyncio.run(cevir_asenkron())

    async def cevir_asenkron():
        try:
            metin = giris_alani.get("1.0", tk.END).strip()
            kaynak_dil = kaynak_dil_menu.get()
            hedef_dil = hedef_dil_menu.get()

            translator = Translator()
            ceviri = await translator.translate(metin, src=kaynak_dil, dest=hedef_dil)

            pencere.after(0, lambda: guncelle_cikti(ceviri.text))

        except Exception as e:
            pencere.after(0, lambda: guncelle_cikti(f"Hata: {e}"))

    def guncelle_cikti(text):
        cikti_alani.delete("1.0", tk.END)
        cikti_alani.insert(tk.END, text)

    pencere = tk.Tk()
    pencere.title("Messier Translator")

    giris_etiketi = tk.Label(pencere, text="Çevirilecek Metin:")
    giris_etiketi.pack(pady=5)
    giris_alani = tk.Text(pencere, height=5, width=40)
    giris_alani.pack(pady=5)

    kaynak_dil_menu = tk.StringVar(pencere)
    kaynak_dil_menu.set("tr")
    kaynak_dil_menu_secimi = tk.OptionMenu(pencere, kaynak_dil_menu, "tr", "en", "es", "fr", "de")
    kaynak_dil_menu_secimi.pack(pady=5)

    hedef_dil_menu = tk.StringVar(pencere)
    hedef_dil_menu.set("en")
    hedef_dil_menu_secimi = tk.OptionMenu(pencere, hedef_dil_menu, "tr", "en", "es", "fr", "de")
    hedef_dil_menu_secimi.pack(pady=5)

    cevir_butonu = tk.Button(pencere, text="Çevir", command=cevir)
    cevir_butonu.pack(pady=10)

    cikti_etiketi = tk.Label(pencere, text="Çeviri:")
    cikti_etiketi.pack(pady=5)
    cikti_alani = tk.Text(pencere, height=5, width=40)
    cikti_alani.pack(pady=5)

    pencere.mainloop()

def zamanlayıcı(dakika):
    dakika_sn = int(dakika) * 60
    time.sleep(dakika_sn)
    playsound(sesdosyasi)
    text_box.insert(tk.END, "Ben:" + dakika +" dakikalık"+" zamanlayıcı tamamlandı.\n")
    speak(dakika+" dakikalık"+" zamanlayıcı tamamlandı.")

def hesap_makinesi():
    def ekle(deger):
        ekran.insert(tk.END, deger)

    def hesapla():
        try:
            if not ekran.get():
                sonuc_yazisi.config(text="Lütfen bir işlem girin.")
                return

            sonuc = eval(ekran.get())
            ekran.delete(0, tk.END)
            ekran.insert(0, sonuc)
            sonuc_yazisi.config(text="")

        except (SyntaxError, NameError, ZeroDivisionError, Exception) as e:
            sonuc_yazisi.config(text=f"Hata: {e}")

        except Exception as e:
            sonuc_yazisi.config(text=f"Bir hata oluştu: {e}")


    window = tk.Tk()
    window.title("Tuşlu Hesap Makinesi")

    ekran = tk.Entry(window, width=30, borderwidth=5)
    ekran.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

    tuslar = [
        '7', '8', '9', '/',
        '4', '5', '6', '*',
        '1', '2', '3', '-',
        '0', '.', '=', '+'
    ]

    row = 1
    col = 0
    for tus in tuslar:
        buton = tk.Button(window, text=tus, padx=20, pady=10, command=lambda tus=tus: ekle(tus))
        buton.grid(row=row, column=col, padx=5, pady=5)
        col += 1
        if col > 3:
            col = 0
            row += 1

    temizle_butonu = tk.Button(window, text="C", padx=20, pady=10, command=lambda: ekran.delete(0, tk.END))
    temizle_butonu.grid(row=row, column=0, columnspan=2, padx=5, pady=5)

    hesapla_butonu = tk.Button(window, text="=", padx=20, pady=10, command=hesapla)
    hesapla_butonu.grid(row=row, column=2, columnspan=2, padx=5, pady=5)


    sonuc_yazisi = tk.Label(window, text="")
    sonuc_yazisi.grid(row=row+1, column=0, columnspan=4, pady=5)

    window.mainloop()



def motivasyon():
    motivasyon_sozleri = [
    "Başarı, başarısızlıktan sonraki bir denemedir.",
    "Hayallerinizin peşinden koşun, korkmayın.",
    "Bugün yapabileceğiniz küçük bir adım, yarın büyük bir başarıya dönüşebilir.",
    "Her gün yeni bir başlangıçtır.",
    "Kendinize inanın, başarabilirsiniz.",
    "Sınırlarınızı zorlayın, potansiyelinizi keşfedin.",
    "Olumsuz düşünceleri olumlu düşüncelerle değiştirin.",
    "Başarının sırrı, azim ve kararlılıktır.",
    "Zorluklar, sizi daha güçlü kılar.",
    "Her başarısızlık, yeni bir öğrenme fırsatıdır.",
    "Pes etmeyin, devam edin!",
    "İmkansız diye bir şey yoktur.",
    "Kendinize güvenin, yeteneklerinizin farkına varın.",
    "Hedeflerinizi belirleyin ve onlara doğru ilerleyin.",
    "Her gün kendinizi geliştirin.",
    "Başkalarına ilham verin, onlara destek olun.",
    "Pozitif olun, pozitif enerji yayının.",
    "Hayatınızın kontrolünü elinize alın.",
    "Korkularınızın üstesinden gelin.",
    "Yeteneklerinizin farkına varın ve onları geliştirin.",
    "Başarıya giden yol, çalışmak ve azim göstermektir.",
    "Sabırlı olun, sonuçlar zamanla ortaya çıkar.",
    "Kendinizi eleştirin, ancak kendinizi yıkmayın.",
    "Başarıya giden yol, sürekli öğrenmektir.",
    "Düştüğünüzde kalkın ve tekrar deneyin.",
    "Hayatınızın sorumluluğunu alın.",
    "Başkalarının görüşlerine takılmayın.",
    "Kendinize olan inancınızı asla kaybetmeyin.",
    "Hayatınızda olumlu değişiklikler yapın.",
    "Her gün yeni bir şey öğrenin.",
    "Başarıya ulaşmak için sürekli çaba gösterin.",
    "Hedeflerinize ulaşmak için planlı ve düzenli çalışın.",
    "Kendinizi motive edin ve motive kalın.",
    "Başkalarına yardım edin, onlara destek olun.",
    "Hayatınızda dengeyi sağlayın.",
    "Stresle başa çıkma yolları öğrenin.",
    "Sağlığınıza dikkat edin.",
    "Olumlu ilişkiler kurun.",
    "Kendinize zaman ayırın.",
    "Hobilerinizin tadını çıkarın.",
    "Doğayla vakit geçirin.",
    "Seyahat edin, yeni yerler keşfedin.",
    "Yeni şeyler öğrenin, kendinizi geliştirin.",
    "Hayatın tadını çıkarın!",
    "Her şeyin bir zamanı vardır.",
    "Sabır, başarıya giden yolda önemli bir faktördür.",
    "Azim, başarının anahtarıdır.",
    "Kararlılık, hedefinize ulaşmanıza yardımcı olur.",
    "İnanç, başarıya giden yolda size güç verir.",
    "Umut, sizi motive eder ve ilerlemenizi sağlar.",
    "Sevgi, hayatınıza pozitif enerji katar.",
    "Neşe, hayatınızı daha anlamlı kılar.",
    "Barış, iç huzurunuzu sağlar.",
    "Minnettarlık, hayatınızdaki güzellikleri görmenizi sağlar.",
    "Affetmek, sizi özgürleştirir.",
    "Bağışlamak, ruhunuz için iyidir.",
    "Yardımlaşmak, insanlığın güzelliğidir.",
    "Empati, başkalarını anlamanıza yardımcı olur.",
    "Merhamet, insan olmanın en güzel özelliklerinden biridir.",
    "Adalet, toplumun temel taşlarından biridir.",
    "Doğruluk, güvenilirliğin temelidir.",
    "Sadakat, güçlü ilişkilerin temelidir.",
    "Cömertlik, insanları mutlu eder.",
    "Saygı, karşılıklı anlayışın temelidir.",
    "Hoşgörü, farklılıkları kabul etmeyi sağlar.",
    "Tolerans, barışçıl bir yaşam için gereklidir.",
    "Anlayış, iletişimin temelidir.",
    "Kabul, kendinizi ve başkalarını sevmenizi sağlar.",
    "Özgüven, başarıya giden yolda önemli bir faktördür.",
    "Kendine inanmak, her şeyin başlangıcıdır.",
    "Hayat kısa, yaşamaya değer.",
    "Her anın tadını çıkarın.",
    "Mutlu olun, hayatı dolu dolu yaşayın!",
    "Kendinize iyi bakın.",
    "Sağlıklı kalın, mutlu kalın!",
    "Hayallerinizin peşinden koşmaya devam edin!",
    "Başarıya ulaşana kadar pes etmeyin!",
    "Kendinize inanın, başarabilirsiniz!",
    "Her şey mümkün, yeter ki isteyin!",
    "Hayat bir macera, keşfedin!",
    "Öğrenmeye devam edin, gelişmeye devam edin!",
    "Kendinizi sürekli geliştirin!",
    "Hayatınızı dolu dolu yaşayın!",
    "Her gün yeni bir fırsattır!",
    "Mutlu bir hayat için çalışın!",
    "Başarıya ulaşmak için azim gösterin!",
    "Kendinize olan inancınızı asla kaybetmeyin!"
    ]

    birsöz= random.choice(motivasyon_sozleri)
    speak(birsöz)
    text_box.insert(tk.END, "Ben: " + birsöz +"\n")

def messier_ai():

    genai.configure(api_key="YOUR_API_KEY")


    generation_config = {
        "temperature": 1,
        "top_p": 0.95,
        "top_k": 40,
        "max_output_tokens": 8192,
        "response_mime_type": "text/plain",
    }

    model = genai.GenerativeModel(
        model_name="tunedModels/messierai-q377f8mqnhnl",
        generation_config=generation_config,
    )

    chat_session = model.start_chat(history=[])

    def send_message():
        user_message = user_input.get("1.0", tk.END).strip()
        chat_history.config(state=tk.NORMAL)
        chat_history.insert(tk.END, "Siz: " + user_message + "\n")
        chat_history.config(state=tk.DISABLED)
        user_input.delete("1.0", tk.END)

        try:
            response = chat_session.send_message(user_message)
            chat_history.config(state=tk.NORMAL)
            chat_history.insert(tk.END, "Messier_AI: " + response.text + "\n")
            chat_history.config(state=tk.DISABLED)

        except Exception as e:
            chat_history.config(state=tk.NORMAL)
            chat_history.insert(tk.END, f"Hata: {e}\n")
            chat_history.config(state=tk.DISABLED)
            import traceback
            traceback.print_exc()

    def clear_history():
        chat_history.config(state=tk.NORMAL)
        chat_history.delete("1.0", tk.END)
        chat_history.config(state=tk.DISABLED)


    win = tk.Tk()
    win.title("Messier_AI")

    chat_history = scrolledtext.ScrolledText(win, wrap=tk.WORD, state=tk.DISABLED) 
    chat_history.pack(fill=tk.BOTH, expand=True)

    user_input = tk.Text(win, height=5)
    user_input.pack(fill=tk.X)

    send_button = tk.Button(win, text="Gönder", command=send_message)
    send_button.pack()

    clear_button = tk.Button(win, text="Temizle", command=clear_history)
    clear_button.pack()

    win.mainloop()


def record():
    with sr.Microphone() as source:
        audio = r.listen(source)
        try:
            return r.recognize_google(audio, language="tr-TR")
        except sr.UnknownValueError:
            return "Maalesef bir hata oldu"
        except sr.RequestError:
            return "Sistem Hatası"

def response(voice):
    text_box.insert(tk.END, "Sen: " + voice + "\n")
    if "nasılsın" in voice:
        speak("İyiyim peki ya sen?")
        text_box.insert(tk.END, "Ben: İyiyim peki ya sen?\n")
    elif "saat kaç" in voice:
        speak(datetime.now().strftime("%H:%M:%S"))
        text_box.insert(tk.END, "Ben: " + datetime.now().strftime("%H:%M:%S") + "\n")
    elif "arama yap" in voice:
        speak("Arama motoru açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Arama motoru açılıyor..."+"\n")
        messier_go()
    elif "Bugün ayın kaçı" in voice:
        speak(datetime.now().strftime("%d/%m/%Y"))
        text_box.insert(tk.END, "Ben: " + datetime.now().strftime("%d/%m/%Y") + "\n")
    elif "sözlük" in voice:
        speak("Sözlük açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Sözlük açılıyor..."+"\n")
        messierlexicon()
    elif "notlar" in voice:
        speak("Notlar açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Notlar açılıyor..."+"\n")
        notlar()
    elif "çeviri" in voice:
        speak("Çeviri açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Çeviri açılıyor..."+"\n")
        çeviri()
    elif "hesap makinesi" in voice:
        speak("Hesap Makinesi açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Hesap Makinesi açılıyor..."+"\n")
        hesap_makinesi()
    elif "Yapay Zeka" in voice:
        speak("Yapayzeka açılıyor...")
        text_box.insert(tk.END, "Ben: " + "Yapayzeka açılıyor..."+"\n")
        messier_ai()
    elif "yt" in voice:
        ytarama = voice[3:]
        speak("Yt araması yapılıyor...")
        text_box.insert(tk.END, "Ben: " + "Youtube araması yapılıyor..."+"\n")
        webbrowser.open("https://www.youtube.com/results?search_query="+ytarama)
    elif "zamanlayıcı" in voice:
        speak("Zamanlayıcı kuruluyor")
        text_box.insert(tk.END, "Ben: " + "Zamanlayıcı kuruluyor"+"\n")
        dakika = voice[11:]
        zamanlayıcı(dakika)
    elif "beni motive et" in voice:
        motivasyon()
    elif "Bugün hava nasıl" in voice:
        api_key = "YOUR_API_KEY"

        if api_key is None:
            raise ValueError("WEATHERAPI_KEY ortam değişkeni ayarlanmadı. Lütfen WeatherAPI'den bir API anahtarı alın ve ortam değişkeni olarak ayarlayın.")


        def get_weather(city, country_code):
            """WeatherAPI'den hava durumu verilerini alır."""
            base_url = "http://api.weatherapi.com/v1"
            endpoint = "/current.json"
            url = f"{base_url}{endpoint}?key={api_key}&q={city},{country_code}"

            try:
                response = requests.get(url)
                response.raise_for_status()
                data = response.json()
                return data
            except requests.exceptions.RequestException as e:
                print(f"Hata: {e}")
                return None

        if __name__ == "__main__":
            speak("Hangi şehirdeki hava durumunu öğrenmek istersiniz?")
            text_box.insert(tk.END, "Ben: " + "Hangi şehirdeki hava durumunu öğrenmek istersiniz?"+"\n")
            city = record()
            text_box.insert(tk.END, "Sen:" + city + "\n")

            speak("Hangi ülkenin hava durumunu öğrenmek istersiniz? (örneğin, TR, US)")
            text_box.insert(tk.END, "Ben: " + "Hangi ülkenin hava durumunu öğrenmek istersiniz? (örneğin, TR, US)"+"\n")
            country_code = record().upper()
            text_box.insert(tk.END, "Sen:" + country_code + "\n")

            weather_data = get_weather(city, country_code)

            if weather_data:
                try:
                    temperature = weather_data["current"]["temp_c"]
                    condition = weather_data["current"]["condition"]["text"]
                    wind_speed = weather_data["current"]["wind_kph"]
                    humidity = weather_data["current"]["humidity"]

                    text_box.insert(tk.END, "Ben:" + f" Şehir: {city}, {country_code}"+ "\n")
                    text_box.insert(tk.END, "Ben:" + f" Sıcaklık: {temperature} °C"+"\n")
                    text_box.insert(tk.END, "Ben:" + f" Hava Durumu: {condition}"+"\n")
                    text_box.insert(tk.END, "Ben:" + f" Rüzgar Hızı: {wind_speed} km/h"+"\n")
                    text_box.insert(tk.END, "Ben:" + f" Nem: {humidity}%"+"\n")
                    speak(f"Şehir: {city}, {country_code}")
                    speak(f"Sıcaklık: {temperature} °C")
                    speak(f"Hava Durumu: {condition}")
                    speak(f"Rüzgar Hızı: {wind_speed} km/h")
                    speak(f"Nem: {humidity}%")
                except KeyError as e:
                    speak(f"Beklenmedik veri yapısı: {e}")
            else:
                speak("Hava durumu verileri alınamadı.")
    elif "görüşürüz" in voice:
        speak("Görüşürüz!")
        text_box.insert(tk.END, "Ben: Görüşürüz!\n")
        root.destroy()
    else:
        text_box.insert(tk.END, "Ben: Anlamadım.\n")

def speak(string):
    tts = gTTS(string, lang="tr")
    rand = random.randint(1, 10000)
    file = "audio-" + str(rand) + ".mp3"
    tts.save(file)
    playsound(file)
    os.remove(file)

def listen_loop():
    while True:
        voice = record()
        if voice:
            response(voice)
        time.sleep(1)

root = tk.Tk()
root.title("Sesli Messier Asistan")

text_box = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=20, width=50)
text_box.pack()

speak("Nasıl Yardımcı Olabilirim?")
text_box.insert(tk.END, "Ben: Nasıl Yardımcı Olabilirim?\n")


listen_thread = threading.Thread(target=listen_loop)
listen_thread.daemon = True 
listen_thread.start()

root.mainloop()
