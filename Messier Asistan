import tkinter as tk
import datetime
import webbrowser
import urllib.parse
import time
import os
from playsound import playsound
from googleapiclient.discovery import build
from bs4 import BeautifulSoup
from translate import Translator
from tkinter import messagebox
from tkinter import ttk
from functools import partial



default_sound_file = r"Galaxy-Note-4-Melody.mp3"  # Ses dosyası yolu

if not os.path.exists(default_sound_file):
    uyari_mesaji = "Uyarı: Varsayılan ses dosyası bulunamadı. Zamanlayıcı sesi çalınmayacak.\n"
else:
    uyari_mesaji = ""
def hesapmakinesi():
    def ekle(deger):
        ekran.insert(tk.END, deger)

    def hesapla():
        try:
            if not ekran.get():
                sonuc_yazisi.config(text="Lütfen bir işlem girin.")
                return
            sonuc = eval(ekran.get()) # Güvenlik açığı!  Düzeltmeniz gerekiyor!
            ekran.delete(0, tk.END)
            ekran.insert(0, sonuc)
            sonuc_yazisi.config(text="")
        except (SyntaxError, NameError, ZeroDivisionError, Exception) as e:
            sonuc_yazisi.config(text=f"Hata: {e}")

    pencere_hesap = tk.Toplevel()
    pencere_hesap.title("Tuşlu Hesap Makinesi")

    ekran = tk.Entry(pencere_hesap, width=30, borderwidth=5)
    ekran.grid(row=0, column=0, columnspan=4, padx=10, pady=10)

    tuslar = [
        '7', '8', '9', '/',
        '4', '5', '6', '*',
        '1', '2', '3', '-',
        '0', '.', '=', '+'
    ]

    row = 1
    col = 0
    for tus in tuslar:
        buton = tk.Button(pencere_hesap, text=tus, padx=20, pady=10, command=lambda tus=tus: ekle(tus))
        buton.grid(row=row, column=col, padx=5, pady=5)
        col += 1
        if col > 3:
            col = 0
            row += 1

    temizle_butonu = tk.Button(pencere_hesap, text="C", padx=20, pady=10, command=lambda: ekran.delete(0, tk.END))
    temizle_butonu.grid(row=row, column=0, columnspan=2, padx=5, pady=5)

    hesapla_butonu = tk.Button(pencere_hesap, text="=", padx=20, pady=10, command=hesapla)
    hesapla_butonu.grid(row=row, column=2, columnspan=2, padx=5, pady=5)

    sonuc_yazisi = tk.Label(pencere_hesap, text="")
    sonuc_yazisi.grid(row=row+1, column=0, columnspan=4, pady=5)

def çeviri():
    def cevir():
        try:
            metin = giris_alani.get("1.0", tk.END).strip()
            kaynak_dil = kaynak_dil_menu.get()
            hedef_dil = hedef_dil_menu.get()

            translator = Translator(to_lang=hedef_dil, from_lang=kaynak_dil)
            ceviri = translator.translate(metin)
            cikti_alani.delete("1.0", tk.END)
            cikti_alani.insert(tk.END, ceviri)

        except Exception as e:
            cikti_alani.delete("1.0", tk.END)
            cikti_alani.insert(tk.END, f"Hata: {e}")


    # Tkinter penceresi
    pencere = tk.Tk()
    pencere.title("Messier Translator")

    # Giriş alanı (aynı önceki kodla)
    giris_etiketi = tk.Label(pencere, text="Çevirilecek Metin:")
    giris_etiketi.pack(pady=5)
    giris_alani = tk.Text(pencere, height=5, width=40)
    giris_alani.pack(pady=5)

    # Kaynak dil menüsü (aynı önceki kodla)
    kaynak_dil_menu = tk.StringVar(pencere)
    kaynak_dil_menu.set("tr")
    kaynak_dil_menu_secimi = tk.OptionMenu(pencere, kaynak_dil_menu, "tr", "en", "es", "fr", "de")
    kaynak_dil_menu_secimi.pack(pady=5)

    # Hedef dil menüsü (aynı önceki kodla)
    hedef_dil_menu = tk.StringVar(pencere)
    hedef_dil_menu.set("en")
    hedef_dil_menu_secimi = tk.OptionMenu(pencere, hedef_dil_menu, "tr", "en", "es", "fr", "de")
    hedef_dil_menu_secimi.pack(pady=5)

    # Çevir butonu (aynı önceki kodla)
    cevir_butonu = tk.Button(pencere, text="Çevir", command=cevir)
    cevir_butonu.pack(pady=10)

    # Çıktı alanı (aynı önceki kodla)
    cikti_etiketi = tk.Label(pencere, text="Çeviri:")
    cikti_etiketi.pack(pady=5)
    cikti_alani = tk.Text(pencere, height=5, width=40)
    cikti_alani.pack(pady=5)

def google_search(query):
    API_KEY = "YOUR_API_KEY"  # YOUR API KEY HERE.  LÜTFEN KENDİ ANAHTARINIZI YAZIN!
    CSE_ID = "YOUR_CSE_ID"    # YOUR CSE ID HERE. LÜTFEN KENDİ KİMLİĞİNİZİ YAZIN!

    def google_search(search_query):
        service = build("customsearch", "v1", developerKey=API_KEY)
        try:
            res = service.cse().list(q=search_query, cx=CSE_ID).execute()
            return res.get("items", [])
        except Exception as e:
            messagebox.showerror("Hata", f"Google Arama hatası: {e}")
            return []

    def display_results(results):
        for child in result_tree.get_children():
            result_tree.delete(child) # önceki sonuçları temizle

        if results:
            for result in results:
                title = result.get('title', 'Başlık Yok')
                link = result.get('link', 'URL Yok')
                snippet = result.get('snippet', '')

                result_tree.insert("", "end", text=title, values=(link, snippet))

        else:
            result_tree.insert("", "end", text="Sonuç bulunamadı.", values=("", ""))

    def open_link(event):
        item = result_tree.selection()[0]
        link = result_tree.item(item)['values'][0]
        webbrowser.open(link)


    def search_button_clicked():
        search_query = search_entry.get()
        if not search_query:
            messagebox.showwarning("Uyarı", "Lütfen bir arama sorgusu girin.")
            return
        results = google_search(search_query)
        display_results(results)

    root = tk.Tk()
    root.title("Messier Go")


    search_label = tk.Label(root, text="Arama Sorgusu:")
    search_label.pack(pady=5)

    search_entry = tk.Entry(root, width=40)
    search_entry.pack(pady=5)

    search_button = tk.Button(root, text="Ara", command=search_button_clicked)
    search_button.pack(pady=5)

    # Treeview kullanarak kaydırma
    result_tree = ttk.Treeview(root, columns=("link", "snippet"), show="headings")
    result_tree.heading("link", text="Link")
    result_tree.heading("snippet", text="Özet")
    result_tree.column("link", width=200, stretch=tk.NO)
    result_tree.column("snippet", width=400, stretch=tk.YES)
    result_tree.pack(expand=True, fill=tk.BOTH)
    result_tree.bind("<Double-1>", open_link) # Double click ile link açma

def sozluk():
    import csv
    import tkinter as tk
    from tkinter import messagebox, scrolledtext
    import os

    def tdk_kelime_islemleri(dosya_adi):
        """TDK kelime verilerini işleyen bir fonksiyon (Tkinter ile entegre)."""

        try:
            with open(dosya_adi, 'r', encoding='utf-8') as dosya:
                oku = csv.DictReader(dosya)
                veriler = list(oku)

            def yazdir_tum_anlamlar():
                sonuc = "\n".join([f"'{satir['madde']}': '{satir['anlam']}'" for satir in veriler])
                sonuc_pencere = tk.Toplevel(root)
                sonuc_pencere.title("Tüm Anlamlar")
                sonuc_text = scrolledtext.ScrolledText(sonuc_pencere, wrap=tk.WORD)
                sonuc_text.insert(tk.END, sonuc)
                sonuc_text.pack(expand=True, fill="both", padx=10, pady=10)
                sonuc_text.config(state=tk.DISABLED)

            def bul_anlam():
                aranan_madde = giris_alanı.get()
                bulunan = next((satir for satir in veriler if satir['madde'] == aranan_madde), None)
                sonuc_alani.config(state=tk.NORMAL) # Yazma moduna alınır
                sonuc_alani.delete("1.0", tk.END)
                if bulunan:
                    sonuc_alani.insert(tk.END, f"'{bulunan['madde']}': '{bulunan['anlam']}'")
                else:
                    sonuc_alani.insert(tk.END, f"'{aranan_madde}' maddesi bulunamadı.")
                sonuc_alani.config(state=tk.DISABLED) # Tekrar okuma moduna alınır


            root = tk.Tk()
            root.title("MessierLexicon")
            root.geometry("600x400")

            root.grid_rowconfigure(0, weight=1)
            root.grid_columnconfigure(0, weight=1)


            tk.Label(root, text="Madde Girin:").grid(row=0, column=0, sticky="w", padx=5, pady=5)

            giris_alanı = tk.Entry(root)
            giris_alanı.grid(row=1, column=0, sticky="ew", padx=5, pady=5)

            tk.Button(root, text="Tüm Anlamları Yazdır", command=yazdir_tum_anlamlar).grid(row=2, column=0, sticky="ew", padx=5, pady=5)
            tk.Button(root, text="Anlam Bul", command=bul_anlam).grid(row=3, column=0, sticky="ew", padx=5, pady=5)


            sonuc_alani = scrolledtext.ScrolledText(root, wrap=tk.WORD)
            sonuc_alani.grid(row=4, column=0, sticky="nsew", padx=5, pady=5)
            sonuc_alani.config(state=tk.DISABLED)

        except FileNotFoundError:
            messagebox.showerror("Hata", f"Hata: '{dosya_adi}' dosyası bulunamadı.")
        except KeyError as e:
            messagebox.showerror("Hata", f"Hata: '{e}' sütunu dosyada bulunamadı. Lütfen verilerinizin yapısını kontrol edin.")
        except Exception as e:
            messagebox.showerror("Hata", f"Beklenmedik bir hata oluştu: {e}")


    dosya_adi = "tdk_word_meaning_data.csv"  # Dosya adını doğrulayın
    tdk_kelime_islemleri(dosya_adi)

def selamla():
    mesaj_alani.insert(tk.END, "Merhaba! Sana nasıl yardımcı olabilirim?\n")


def zaman_sor():
    simdi = datetime.datetime.now()
    zaman_metni = f"Şu anki zaman: {simdi.strftime('%H:%M:%S')}\n"
    ekle_mesaj(zaman_metni)



def poe_ac():
    try:
        webbrowser.open("https://poe.com/Messier_AI")
        ekle_mesaj("Messier_AI sayfasına yönlendiriliyorsunuz...\n")
    except webbrowser.Error as e:
        ekle_mesaj(f"Hata: Poe sayfası açılamadı: {e}\n")
    except Exception as e:
        ekle_mesaj(f"Hata: Beklenmedik bir hata oluştu: {e}\n")


def zamanlayici(dakika):
    try:
        dakika_sn = int(dakika) * 60
        if dakika_sn <= 0:
            ekle_mesaj("Geçersiz süre. Lütfen pozitif bir sayı girin.\n")
            return

        time.sleep(dakika_sn)
        if os.path.exists(default_sound_file):
            try:
                playsound(default_sound_file)
            except playsound.PlaysoundException as e:
                ekle_mesaj(f"Hata: Ses dosyası çalınamadı: {e}\n")
            except Exception as e:
                ekle_mesaj(f"Hata: Ses dosyası çalınırken beklenmedik bir hata oluştu: {e}\n")
        ekle_mesaj(f"{dakika} dakikalık zamanlayıcı tamamlandı!\n")
    except ValueError:
        ekle_mesaj("Geçersiz süre. Lütfen bir sayı girin.\n")
    except Exception as e:
        ekle_mesaj(f"Hata: Zamanlayıcıda beklenmedik bir hata oluştu: {e}\n")


def komut_islec(event=None):
    komut = giris_alani.get().lower()
    giris_alani.delete(0, tk.END)

    try:
        if komut == "selam":
            selamla()
        elif komut == "zaman":
            zaman_sor()
        elif komut.startswith("arama"):
            arama_terimi = komut[6:]
            results = google_search(arama_terimi)

        elif komut == "yapayzeka" or komut == "messier ai":
            poe_ac()
        elif komut == "sözlük":
            sozluk()
        elif komut.startswith("hesap makinesi"):
            hesapmakinesi()
        elif komut.startswith("çeviri"):
            çeviri()
        elif komut == "çıkış":
            pencere.destroy()
        elif komut.startswith("zamanlayıcı"):
            try:
                dakika = komut[11:]
                zamanlayici(dakika)
            except IndexError:
                ekle_mesaj("Lütfen zamanlayıcı süresini belirtin (örneğin: zamanlayıcı 5).\n")
        else:
            ekle_mesaj("Geçersiz komut.\n")
    except Exception as e:
        ekle_mesaj(f"Hata: Komut işlenirken beklenmedik bir hata oluştu: {e}\n")

def ekle_mesaj(mesaj):
    mesaj_alani.config(state=tk.NORMAL)
    mesaj_alani.insert(tk.END, mesaj)
    mesaj_alani.tag_config("link", foreground="blue", underline=1)
    mesaj_alani.config(state=tk.DISABLED)
    mesaj_alani.see(tk.END)


def open_link(event):
    try:
        current_index = float(mesaj_alani.index(tk.CURRENT))
        soup = BeautifulSoup(mesaj_alani.get("1.0", tk.END), 'html.parser')
        links = [a['href'] for a in soup.find_all('a', href=True)]

        if links:
            webbrowser.open(links[int(current_index // 4)])

    except (IndexError, ValueError, AttributeError, tk.TclError) as e:
        print(f"Link açılırken bir hata oluştu: {e}")
    except Exception as e:
        print(f"Beklenmedik bir hata oluştu: {e}")


pencere = tk.Tk()
pencere.title("Messier Asistan")

etiket = tk.Label(pencere, text="Komutunuzu girin:")
etiket.pack(pady=5)

giris_alani = tk.Entry(pencere)
giris_alani.pack(pady=5)
giris_alani.bind("<Return>", komut_islec)

komut_butonu = tk.Button(pencere, text="Gönder", command=komut_islec)
komut_butonu.pack(pady=5)

mesaj_alani = tk.Text(pencere, height=10, width=40, wrap=tk.WORD)
mesaj_alani.pack(pady=5)
mesaj_alani.config(state=tk.DISABLED)
mesaj_alani.bind("<Button-1>", open_link)

mesaj_alani.config(state=tk.NORMAL)
mesaj_alani.insert(tk.END, uyari_mesaji)
mesaj_alani.config(state=tk.DISABLED)

pencere.mainloop()
